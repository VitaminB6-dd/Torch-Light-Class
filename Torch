def light_circle(color, radius):
    surf = pygame.Surface((radius * 2, radius * 2))
    pygame.draw.circle(surf, color, (radius, radius), radius)
    surf.set_colorkey((0, 0, 0))
    return surf

class Torch():
    def __init__(self, surface, pos):
        self.surface = surface
        self.pos = [int(pos[X]), int(pos[Y])]
        self.flames = []

        self.flame_decay_rate = -0.2
        self.flame_amplitude = random.randint(5, 15)
        self.flame_frequency = 0.0009
        self.flame_pos_offset = 50
        self.max_amount_of_flames = 7
        self.flame_max_size = 5
        self.flame_disappearing_size = 4

        self.sparks = []
        self.spark_decay_rate = -0.2
        self.sparks_pos_offset = [0, -20]

    def handle_flames(self):
        if len(self.flames) < self.max_amount_of_flames:
            self.flames.append([[self.pos[X] + random.randint(-self.flame_pos_offset, self.flame_pos_offset) / 10, self.pos[Y]], [0, random.randint(-15, -5) / 10],random.randint(5,8), 0, random.randint(3, 12)])

        self.surface.blit(light_circle([25, 25, 15], int(100 + (self.flames[0][3] * 3))), (int(self.pos[X] - 100 - (self.flames[0][3] * 3)), int(self.pos[Y] - 100 - (self.flames[0][3] * 3))), special_flags=pygame.BLEND_RGB_ADD)
        for flame in self.flames:
            flame[3] = abs(math.sin(pygame.time.get_ticks() * self.flame_frequency + + flame[4]) * self.flame_amplitude)
            flame[0][X] += flame[1][0]
            flame[0][Y] += flame[1][1]
            flame[2] += self.flame_decay_rate
            if flame[3] < flame[2] * 2: flame[3] = flame[2] * 2
            pygame.draw.circle(self.surface, (242, random.randint(28, 230), 14), (int(flame[0][0]), int(flame[0][1])),int(flame[3]))
            self.surface.blit(light_circle([10, 10, 5], int(flame[2] * 4)), (int(flame[0][X] - flame[2] * 4), int(flame[0][Y] - flame[2] * 4)), special_flags=pygame.BLEND_RGB_ADD)

            if flame[2] <= self.flame_disappearing_size:
                self.flames.remove(flame)

    def handle_sparks(self):
        if math.sin(pygame.time.get_ticks()) >= 0.9:
            self.sparks.append([[self.pos[X] + self.sparks_pos_offset[X], self.pos[Y] + self.sparks_pos_offset[Y]], [random.random() / 100, random.randint(-40, -20) / 10], random.randint(6, 10)])

        for spark in self.sparks:
            spark[0][X] += spark[1][0]
            spark[0][Y] += spark[1][1]
            spark[1][0] += random.randint(-5, 5) / 10
            spark[2] += self.spark_decay_rate
            pygame.draw.circle(self.surface, (242, random.randint(28, 230), 14), (int(spark[0][0]), int(spark[0][1])),int(spark[2]))
            self.surface.blit(light_circle([20, 20, 15], int(spark[2] * 2)), (int(spark[0][X] - spark[2] * 2), int(spark[0][Y] - spark[2] * 2)), special_flags=pygame.BLEND_RGB_ADD)
            if spark[2] <= 1:
                self.sparks.remove(spark)
